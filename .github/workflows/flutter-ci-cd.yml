name: Flutter CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # Allow manual triggering

jobs:
  test:
    name: Run Flutter Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.3'
          channel: 'stable'
      
      - name: Get dependencies
        run: flutter pub get

      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        
      - name: Analyze project source
        run: flutter analyze
        
      - name: Run tests
        run: flutter test

  version:
    name: Determine Version
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.semver.outputs.new_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          
      - name: Install conventional-changelog and standard-version
        run: npm install -g conventional-changelog-cli standard-version
          
      - name: Generate Semantic Version
        id: semver
        run: |
          echo "🔄 Generating semantic version based on commit history..."

          # Check for existing tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Generate conventional changelog
          CHANGES=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s" | grep -E '^(feat|fix|chore|docs|style|refactor|perf|test|build|ci|revert)')
          
          # Determine version bump type
          BUMP="patch"  # Default to patch
          if echo "$CHANGES" | grep -q "^feat"; then
            BUMP="minor"
          fi
          if echo "$CHANGES" | grep -q "^BREAKING CHANGE"; then
            BUMP="major"
          fi
          
          # Get current version numbers from tag
          IFS='.' read -r -a VERSION_PARTS <<< "$(echo $LATEST_TAG | sed 's/v//')"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Bump version
          if [ "$BUMP" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

  build-android:
    name: Build Android APK
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.3'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
      
      - name: Setup Keystore
        env:
          KEY_PROPERTIES: ${{ secrets.KEY_PROPERTIES }}
          KEYSTORE_JKS_BASE64: ${{ secrets.KEYSTORE_JKS_BASE64 }}
        run: |
          if [ -n "$KEY_PROPERTIES" ] && [ -n "$KEYSTORE_JKS_BASE64" ]; then
            echo "$KEY_PROPERTIES" > android/key.properties
            echo "$KEYSTORE_JKS_BASE64" | base64 --decode > android/app/keystore.jks
            echo "✅ Keystore setup completed"
          else
            echo "⚠️ Keystore secrets not found. Using debug signing."
            # Proceed without error, will use debug signing
          fi
      
      - name: Update version in pubspec.yaml
        run: |
          VERSION="${{ needs.version.outputs.new_version }}"
          VERSION_NUMBER="${VERSION#v}"
          BUILD_NUMBER=$(echo "$VERSION_NUMBER" | tr -d '.')
          sed -i "s/^version: .*/version: $VERSION_NUMBER+$BUILD_NUMBER/" pubspec.yaml
      
      - name: Build APK
        run: |
          echo "📱 Building APK with Flutter $(flutter --version | head -n 1)"
          echo "🔍 Dart SDK version: $(dart --version)"
          flutter build apk --release || {
            echo "❌ APK build failed, trying with --debug";
            flutter build apk --debug;
          }

      - name: Create Release Tag
        id: create_release
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git tag ${{ needs.version.outputs.new_version }}
          git push origin ${{ needs.version.outputs.new_version }}
      
      - name: Upload APK to Hetzner Storage
        if: success()
        env:
          S3_ENDPOINT: ${{ secrets.HETZNER_ENDPOINT }}
          S3_ACCESS_KEY: ${{ secrets.HETZNER_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.HETZNER_SECRET_KEY }}
          S3_BUCKET: ${{ secrets.HETZNER_BUCKET }}
        run: |
          # Install AWS CLI
          pip install awscli
          
          # Configure AWS CLI with Hetzner credentials
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id = $S3_ACCESS_KEY
          aws_secret_access_key = $S3_SECRET_KEY" > ~/.aws/credentials
          
          # Define file path and name
          APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
          VERSION="${{ needs.version.outputs.new_version }}"
          FILENAME="ac-smart-mobile-${VERSION}.apk"
          
          # Upload to Hetzner with S3 compatible API
          aws s3 cp $APK_PATH s3://$S3_BUCKET/releases/android/$FILENAME --endpoint-url $S3_ENDPOINT
          
          # Generate download URL
          DOWNLOAD_URL="$S3_ENDPOINT/$S3_BUCKET/releases/android/$FILENAME"
          echo "APK uploaded to: $DOWNLOAD_URL"
          
          # Add version info to release description
          echo "::set-output name=download_url::$DOWNLOAD_URL"
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version.outputs.new_version }}
          name: AC Smart Mobile ${{ needs.version.outputs.new_version }}
          draft: false
          prerelease: false
          body: |
            # AC Smart Mobile ${{ needs.version.outputs.new_version }}
            
            ## Downloads
            - [Android APK](https://${{ steps.upload_apk.outputs.download_url }})
            
            ## Changelog
            ${{ steps.generate_changelog.outputs.changelog }}
          files: build/app/outputs/flutter-apk/app-release.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
